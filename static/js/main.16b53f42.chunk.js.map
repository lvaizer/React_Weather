{"version":3,"sources":["items/css/LocationItem.module.css","items/css/Header.module.css","items/Header.js","models/WeatherObject.js","utills/SavedLocations.js","utills/WeatherService.js","items/LocationItem.js","elements/CurrentLocation.js","elements/FavoriteLocations.js","items/SearchBar.js","items/LocationFound.js","items/ToastElement.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppBar","position","className","styles","header","Toolbar","Typography","variant","links","src","process","alt","to","WeatherObject","lat","lon","name","temp","min_temp","max_temp","feels_like","humidity","wind","description","generateImage","image","getImageByCode","id","shouldRefresh","isNaN","this","parseInt","weatherObjects","localStorage","getItem","JSON","parse","forEach","storedLocation","push","Object","assign","getWeatherObjectsFromLocalStorage","saveLocations","setItem","stringify","add","weatherObj","remove","index","indexOf","filter","location","splice","get","isSaved","length","getDataByLocation","latitude","longitude","Promise","resolve","fetch","WEATHER_URL","then","response","json","handleWeatherResults","catch","error","results","weatherObject","main","coord","temp_min","temp_max","speed","weather","icon","console","forwardRef","props","ref","useState","forceRender","hide","setHide","loading","setLoading","setWeatherObject","isInFavorites","SavedLocations","errorMessage","useEffect","refreshObject","useImperativeHandle","setWeatherObj","refreshClicked","showToastAndNotifyFavoriteClicked","message","showToast","favoriteClicked","getLocationWeather","data","hideLoading","showError","WeatherService","favoriteText","favoriteIcon","animationStart","opacity","transform","animationEnd","card","Card","style","width","alignItems","CircularProgress","disableShrink","favorite_div","onClick","Title","duration","play","start","end","Tooltip","arrow","title","isLocationSaved","canBeRemoved","toastMessage","setTimeout","CardMedia","card_image","component","CardContent","capitalize","card_margin_bottom","color","Grid","container","card_footer","item","xs","show","setShow","getCurrentPosition","a","navigator","geolocation","coords","err","LocationItem","key","updateState","map","setResults","search","debounce","query","trim","method","body","handleResults","hits","hit","locale_names","toLowerCase","includes","_geoloc","lng","getResultItemByName","isEqual","Autocomplete","freeSolo","onInputChange","e","target","value","onChange","selectedObjects","textContent","isEmpty","onLocationFound","options","renderInput","params","TextField","label","margin","locationFoundElement","useRef","showModal","state","setState","current","Dialog","open","onClose","forceShowToast","Snackbar","anchorOrigin","vertical","horizontal","TransitionComponent","Fade","autoHideDuration","favoriteLocationsElementRef","locationFoundElementRef","toastElementRef","Container","SearchBar","ToastElement","LocationFound","CurrentLocation","FavoriteLocations","Header","Home","Boolean","window","hostname","match","ReactDOM","render","App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.16b53f42.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"LocationItem_card__29Qw0\",\"card_image\":\"LocationItem_card_image__6WsXK\",\"card_margin_bottom\":\"LocationItem_card_margin_bottom__1sLs4\",\"card_footer\":\"LocationItem_card_footer__2MrTa\",\"favorite_div\":\"LocationItem_favorite_div__3a1zY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__39g7w\",\"links\":\"Header_links__1KLEy\"};","import React from 'react';\r\nimport styles from './css/Header.module.css'\r\nimport {Link} from 'react-router-dom'\r\nimport {AppBar, Toolbar, Typography} from '@material-ui/core'\r\n\r\nexport default () => <div><AppBar position=\"static\" className={styles.header}><Toolbar>\r\n    <Typography variant=\"h6\" className={styles.links}>\r\n        <img src={process.env.PUBLIC_URL + '/logo192.png'} alt=\"header_image\"/>\r\n    </Typography>\r\n    <Typography variant=\"h6\" className={styles.links}>\r\n        <Link to={'/'}>Home</Link>\r\n    </Typography></Toolbar>\r\n</AppBar></div>;\r\n\r\n","export default class WeatherObject {\r\n    constructor(lat, lon, name, temp, min_temp, max_temp, feels_like, humidity, wind, description) {\r\n        this.lat = lat;\r\n        this.lon = lon;\r\n        this.name = name;\r\n        this.temp = parseInt(temp);\r\n        this.min_temp = parseInt(min_temp);\r\n        this.max_temp = parseInt(max_temp);\r\n        this.feels_like = parseInt(feels_like);\r\n        this.humidity = humidity;\r\n        this.wind = parseInt(wind);\r\n        this.description = description;\r\n        this.id = 1000;\r\n    }\r\n\r\n    /** Generate image by the WeatherObject id */\r\n    generateImage = () => this.image = '/img/' + getImageByCode(this.id) + '.jpg';\r\n\r\n\r\n    /**\r\n     * Check if the WeatherObject should be refreshed by checking the inner params\r\n     * @return {boolean}\r\n     */\r\n    shouldRefresh = () => !isNaN(this.temp) || !this.name || !isNaN(this.min_temp) || !isNaN(this.max_temp) || !isNaN(this.wind) || !this.humidity || !this.description\r\n}\r\n\r\n/**\r\n * Return the image name by the id provided\r\n * @param id\r\n * @return {string}\r\n */\r\nconst getImageByCode = (id) => {\r\n    switch (true) {\r\n        case id < 500:\r\n            return 'storm';\r\n        case id < 600:\r\n            return 'rain';\r\n        case id < 700:\r\n            return 'snow';\r\n        case id < 800:\r\n            return 'mist';\r\n        case id < 801:\r\n            return 'clear';\r\n        default :\r\n            return 'clouds';\r\n    }\r\n}\r\n","import WeatherObject from '../models/WeatherObject.js';\r\n\r\n/**\r\n * SavedLocations is a function that responsible to handle the weather objects integration with the local storage\r\n */\r\nfunction SavedLocations() {\r\n\r\n    /**\r\n     * Get the WeatherObjects that stored at the local storage\r\n     * @returns {[]} of WeatherObjects\r\n     */\r\n    const getWeatherObjectsFromLocalStorage = () => {\r\n        const weatherObjects = [];\r\n        //Check if locations are stored at the localStorage\r\n        if (!localStorage.getItem('locations')) return weatherObjects;\r\n        //Parse the saved locations to Json objects\r\n        const storedLocations = JSON.parse(localStorage.getItem('locations'));\r\n        //Create new WeatherObject for each of the stored objects and push them into array\r\n        storedLocations.forEach(function (storedLocation) {\r\n            weatherObjects.push(Object.assign(new WeatherObject(), storedLocation))\r\n        });\r\n        return weatherObjects;\r\n    };\r\n\r\n    /**\r\n     * Initialize the local weatherObjects from the local storage\r\n     */\r\n    const weatherObjects = getWeatherObjectsFromLocalStorage();\r\n\r\n    /**\r\n     * Save the local weatherObjects at the localStorage\r\n     */\r\n    const saveLocations = () => localStorage.setItem('locations', JSON.stringify(weatherObjects));\r\n\r\n    /**\r\n     * Add a weatherObj to the local storage\r\n     * @param weatherObj\r\n     */\r\n    this.add = (weatherObj) => {\r\n        weatherObj && weatherObjects.push(weatherObj);\r\n        saveLocations();\r\n    };\r\n\r\n    /**\r\n     * Remove a weatherObj from the local storage\r\n     * @param weatherObj\r\n     */\r\n    this.remove = (weatherObj) => {\r\n        if (!weatherObj) return\r\n        //Get the index of the object by name\r\n        const index = weatherObjects.indexOf(weatherObjects.filter(location => location.name === weatherObj.name)[0]);\r\n        //Return if the object not found\r\n        if (index === -1) return;\r\n        //Cut the object from the local weatherObjects\r\n        weatherObjects.splice(index, 1);\r\n        saveLocations();\r\n    };\r\n\r\n    /**\r\n     * Get the WeatherObjects that stored at the local storage\r\n     * @returns {[]} of WeatherObjects\r\n     */\r\n    this.get = () => weatherObjects;\r\n\r\n    /**\r\n     * Check if the given weatherObj is stored at the local storage\r\n     * @param weatherObj\r\n     * @returns {boolean}\r\n     */\r\n    this.isSaved = (weatherObj) => {\r\n        if (!weatherObj) return false;\r\n        return weatherObjects.filter(location => location.name === weatherObj.name).length > 0\r\n    }\r\n\r\n}\r\n\r\nexport default new SavedLocations();","import WeatherObject from '../models/WeatherObject.js';\r\n\r\nconst WEATHER_APIKEY = '620df9c48870a46c19bd4f30eb0be7b5';\r\nconst WEATHER_URL = 'https://api.openweathermap.org/data/2.5/weather?appid=' + WEATHER_APIKEY + '&units=metric&';\r\n\r\n/**\r\n * WeatherService is a function the responsible to get the weather data from some API and handle it\r\n */\r\nfunction WeatherService() {\r\n\r\n    /**\r\n     * Get data from server request and create WeatherObject by location coordinates\r\n     * @param latitude number\r\n     * @param longitude number\r\n     * @returns {Promise<WeatherObject/error>}\r\n     */\r\n    this.getDataByLocation = (latitude, longitude) => new Promise(resolve => {\r\n        fetch(WEATHER_URL + 'lat=' + latitude + '&lon=' + longitude)\r\n            .then(response => response.json())\r\n            .then(response => resolve(handleWeatherResults(response)))\r\n            .catch(error => resolve(error));\r\n    });\r\n\r\n    /**\r\n     * Handle the results by convert them into WeatherObject\r\n     * @param results\r\n     * @returns {WeatherObject}\r\n     */\r\n    const handleWeatherResults = (results) => {\r\n        let weatherObject;\r\n        if (results && results.main) {\r\n            weatherObject = new WeatherObject(results.coord.lat, results.coord.lon, results.name, results.main.temp, results.main.temp_min, results.main.temp_max, results.main.feels_like, results.main.humidity);\r\n            if (results.wind) weatherObject.wind = results.wind.speed;\r\n            if (results.weather && results.weather.length > 0) {\r\n                weatherObject.description = results.weather[0].description;\r\n                weatherObject.icon = 'http://openweathermap.org/img/wn/' + results.weather[0].icon + '.png';\r\n                weatherObject.id = results.weather[0].id;\r\n                weatherObject.generateImage();\r\n            }\r\n        } else {\r\n            console.error(results);\r\n        }\r\n        return weatherObject;\r\n    }\r\n}\r\n\r\nexport default new WeatherService();","import React, {useState, useEffect, forwardRef, useImperativeHandle} from \"react\";\r\nimport styles from './css/LocationItem.module.css'\r\nimport SavedLocations from \"../utills/SavedLocations\";\r\nimport WeatherService from \"../utills/WeatherService\";\r\nimport {Animate} from \"react-simple-animate\";\r\nimport {capitalize} from 'lodash';\r\nimport {\r\n    Tooltip,\r\n    Grid,\r\n    Card,\r\n    CardContent,\r\n    Typography,\r\n    CardMedia,\r\n    CircularProgress\r\n} from '@material-ui/core'\r\n\r\nexport default forwardRef((props, ref) => {\r\n\r\n    const [, forceRender] = useState();\r\n    const [hide, setHide] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [weatherObject, setWeatherObject] = useState(props.weatherObject);\r\n    let isInFavorites = SavedLocations.isSaved(weatherObject);\r\n    let errorMessage = null;\r\n\r\n    useEffect(() => {\r\n        // Update the document title using the browser API\r\n        refreshObject();\r\n    }, []);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        setWeatherObj(location) {\r\n            isInFavorites = SavedLocations.isSaved(location);\r\n            setWeatherObject(location);\r\n            refreshObject()\r\n        }\r\n    }));\r\n\r\n    /**\r\n     * Refresh the current Weather Object\r\n     */\r\n    const refreshObject = () => (weatherObject && weatherObject.shouldRefresh()) && refreshClicked();\r\n\r\n    /**\r\n     * Responsible to handle element \"favorite clicked\" by:\r\n     * - changing the view\r\n     * - add the item to the local storage\r\n     * - notify parent\r\n     */\r\n    const favoriteClicked = () => {\r\n        //Check if the current object is already saved at the local storage\r\n        const isLocationSaved = SavedLocations.isSaved(weatherObject);\r\n        //Add or remove the current object from the local storage by his status\r\n        isLocationSaved ? SavedLocations.remove(weatherObject) : SavedLocations.add(weatherObject);\r\n        //Update the local variable if the object is marked as favorite\r\n        isInFavorites = !isLocationSaved\r\n        //Hide or show the item if he is saved and if he can be hidden\r\n        setHide(isLocationSaved && props.canBeRemoved);\r\n        //Create toast message by the relevant status\r\n        const toastMessage = 'The location' + ((weatherObject && typeof weatherObject.name !== \"undefined\") ? ('\"' + weatherObject.name + '\"') : '') + ' was ' + (!isLocationSaved ? 'added' : 'removed') + ' successfully';\r\n        if (props.canBeRemoved && isLocationSaved) {\r\n            //whit the hide animation to end\r\n            setTimeout(() => {\r\n                showToastAndNotifyFavoriteClicked(toastMessage)\r\n            }, 200);\r\n        } else {\r\n            //force rendering\r\n            forceRender([]);\r\n            showToastAndNotifyFavoriteClicked(toastMessage)\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show toast message and notify parent that favorite button has clicked\r\n     * @param message\r\n     */\r\n    const showToastAndNotifyFavoriteClicked = (message) => {\r\n        //show the toast message\r\n        showToast(message);\r\n        //notify parent the favorite button clicked\r\n        props.favoriteClicked && props.favoriteClicked();\r\n    }\r\n\r\n    /**\r\n     * Notify parent to show toast\r\n     * @param message\r\n     */\r\n    const showToast = (message) => props.showToast && props.showToast(true, message);\r\n\r\n    /**\r\n     * Handle refresh button click by:\r\n     * - update the UI on loading\r\n     * - create new server request to get the updated data\r\n     * - show the new data at the UI\r\n     */\r\n    const refreshClicked = () => {\r\n        //update the UI on loading\r\n        setLoading(true);\r\n        //create new server request to get the updated data\r\n        getLocationWeather(weatherObject.lat, weatherObject.lon)\r\n            .then(data => {\r\n                data && Object.assign(weatherObject, data);\r\n                errorMessage = data ? null : true\r\n                hideLoading(!data)\r\n            })\r\n            .catch(error => {\r\n                console.error(error)\r\n                hideLoading(true)\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Hide the loading element and render\r\n     * @param showError boolean\r\n     */\r\n    const hideLoading = (showError) => {\r\n        setLoading(false);\r\n        showError && showToast('Error occurred, please try again later.');\r\n    }\r\n\r\n    /**\r\n     * Create server request to get the location weather\r\n     * @param latitude\r\n     * @param longitude\r\n     * @return {Promise<data>}\r\n     */\r\n    const getLocationWeather = (latitude, longitude) => new Promise(resolve => {\r\n        WeatherService.getDataByLocation(latitude, longitude)\r\n            .then(data => resolve(data))\r\n            .catch(error => {\r\n                console.error(error)\r\n                resolve(error);\r\n            });\r\n    })\r\n\r\n    const getLoadingHTML = () => (\r\n        <Card style={{width: '18rem', alignItems: 'center'}}\r\n              className={styles.card}>\r\n            <CircularProgress disableShrink/>\r\n        </Card>);\r\n\r\n    const getErrorHTML = () => (<Card style={{width: '18rem', alignItems: 'center'}}\r\n                                      className={styles.card}>\r\n        <div className={styles.favorite_div}>\r\n            <img alt=\"refresh button\" src=\"./img/refresh.svg\"\r\n                 onClick={refreshClicked}/>\r\n        </div>\r\n        <Card.Title>There is a temporary error, please try again later</Card.Title>\r\n    </Card>);\r\n\r\n    const getAnimationStart = () => ({\r\n        opacity: hide ? 1 : 0,\r\n        transform: hide ? 'scale(1)' : 'scale(0)'\r\n    });\r\n\r\n    const getAnimationEnd = () => ({\r\n        opacity: hide ? 0 : 1,\r\n        transform: hide ? 'scale(0)' : 'scale(1)'\r\n    });\r\n\r\n    const favoriteText = (isInFavorites ? 'Remove from' : 'Add to') + ' My locations';\r\n    const favoriteIcon = './img/favorite_' + (isInFavorites ? 'remove' : 'add') + '.svg';\r\n    const animationStart = getAnimationStart();\r\n    const animationEnd = getAnimationEnd();\r\n\r\n    return <div className={styles.card}>\r\n        {loading ?\r\n            getLoadingHTML() :\r\n            errorMessage ?\r\n                getErrorHTML() :\r\n                <Animate\r\n                    duration={0.2}\r\n                    play start={animationStart}\r\n                    end={animationEnd}>\r\n                    <Card>\r\n                        <div className={styles.favorite_div}>\r\n                            <Tooltip arrow title={favoriteText}>\r\n                                <div><img alt=\"favorite button\" src={favoriteIcon}\r\n                                          onClick={favoriteClicked}/></div>\r\n                            </Tooltip>\r\n                            <div><img alt=\"refresh button\" src=\"./img/refresh.svg\"\r\n                                      onClick={refreshClicked}/></div>\r\n\r\n                        </div>\r\n                        <CardMedia className={styles.card_image}\r\n                                   image={weatherObject.image}\r\n                                   component='div'\r\n                                   title={weatherObject.name}/>\r\n                        <CardContent>\r\n                            <Typography variant=\"h5\"\r\n                                        component=\"h2\">{capitalize(weatherObject.name)}</Typography>\r\n                            <Typography className={styles.card_margin_bottom}\r\n                                        variant=\"subtitle1\" color=\"textSecondary\">\r\n                                {capitalize(weatherObject.description)}\r\n                            </Typography>\r\n                            <Typography className={styles.card_margin_bottom}>\r\n                                <strong>{weatherObject.temp}&deg;</strong>\r\n                                &nbsp;(feels like {weatherObject.feels_like}&deg;)\r\n                            </Typography>\r\n                            <Grid container className={styles.card_footer}>\r\n                                <Grid item xs={4}>\r\n                                    <Typography>\r\n                                        <img alt=\"wind_icon\" src=\"/img/temperature_icon.svg\"/>\r\n                                    </Typography>\r\n                                    <Typography>\r\n                                        {weatherObject.min_temp}&deg;-{weatherObject.max_temp}&deg;\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={4}>\r\n                                    <Typography>\r\n                                        <img alt=\"wind_icon\" src=\"/img/wind_icon.svg\"/>\r\n                                    </Typography>\r\n                                    <Typography>\r\n                                        {weatherObject && weatherObject.wind} km/h\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={4}>\r\n                                    <Typography>\r\n                                        <img alt=\"wind_icon\" src=\"/img/humidity_icon.svg\"/>\r\n                                    </Typography>\r\n                                    <Typography>\r\n                                        {weatherObject && weatherObject.humidity}%\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Animate>}\r\n    </div>;\r\n})","import React, {useState, useEffect} from 'react';\r\nimport LocationItem from \"../items/LocationItem\";\r\nimport WeatherObject from '../models/WeatherObject.js';\r\n\r\nexport default (props) => {\r\n\r\n    const [weatherObject, setWeatherObject] = useState();   //current weather object\r\n    const [show, setShow] = useState(true); //show or hide this view\r\n\r\n    //Trigger getCurrentPosition when the item first rendered\r\n    useEffect(() => {\r\n        getCurrentPosition().then();\r\n    });\r\n\r\n    /**\r\n     * Set the weatherObject position object from latitude and longitude\r\n     * @param latitude number\r\n     * @param longitude number\r\n     * **/\r\n    const setCurrentLocation = (latitude, longitude) => setWeatherObject(new WeatherObject(latitude, longitude));\r\n\r\n    /**\r\n     * Show alert request for the device's current position.\r\n     * <br>Success - the current location will set.\r\n     * <br>Error or decline - will remove the current location view from the user\r\n     * @returns {Promise<void>}\r\n     */\r\n    const getCurrentPosition = async () => {\r\n        navigator.geolocation.getCurrentPosition(\r\n            //while receiving the current device's position pass the latitude and the longitude to set them as the WeatherObject attrs.\r\n            position => setCurrentLocation(position.coords.latitude, position.coords.longitude),\r\n            //while decline or some other error, hide the \"current location\" element from the user.\r\n            err => {\r\n                console.error(err);\r\n                setShow(false);\r\n            }\r\n        );\r\n    };\r\n\r\n    return show ? <div><h5>Current location</h5>{weatherObject &&\r\n    <LocationItem\r\n        key=\"myLocation\"\r\n        weatherObject={weatherObject}\r\n        favoriteClicked={props.favoriteClicked}\r\n        showToast={props.showToast}>\r\n    </LocationItem>\r\n    }\r\n    </div> : <></>;\r\n}","import React, {forwardRef, useImperativeHandle, useState} from 'react';\r\nimport SavedLocations from '../utills/SavedLocations.js';\r\nimport LocationItem from \"../items/LocationItem\";\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\nexport default forwardRef((props, ref) => {\r\n\r\n    const [, updateState] = useState(); //use to force render the element\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        /**\r\n         * Update the element when favorite clicked\r\n         */\r\n        favoriteClicked() {\r\n            updateState([]);\r\n        }\r\n    }));\r\n\r\n    /**\r\n     * Update the element when favorite clicked\r\n     */\r\n    const favoriteClicked = () => updateState([]);\r\n\r\n    return <div>\r\n        <h5>Favorite locations</h5>\r\n        <Grid container> {SavedLocations.get().map(weatherObject => (\r\n            <LocationItem key={weatherObject.name}\r\n                          weatherObject={weatherObject}\r\n                          canBeRemoved={true}\r\n                          showToast={props.showToast}\r\n                          favoriteClicked={favoriteClicked}>\r\n            </LocationItem>\r\n        ))}</Grid>\r\n    </div>;\r\n})","import React, {useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport WeatherObject from '../models/WeatherObject.js';\r\nimport {debounce, isEqual, isEmpty} from 'lodash';\r\n\r\nconst SEARCH_URL = 'https://places-dsn.algolia.net/1/places/query';\r\n\r\nexport default (props) => {\r\n\r\n    const [results, setResults] = useState([]);\r\n\r\n    /**\r\n     * Trigger search on key up\r\n     * @param e\r\n     */\r\n    const handleKeyUp = (e) => search(e.target.value);\r\n\r\n    /**\r\n     * Create search request with the query provided.\r\n     * <br>*This function runs on debounce (after 500 ms)\r\n     * @param query\r\n     */\r\n    const search = debounce((query) => {\r\n        if (!query || query.trim().length === 0) return;\r\n        fetch(SEARCH_URL, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                \"query\": query,\r\n                \"type\": \"city\",\r\n                \"language\": \"en\"\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(response => handleResults(response))\r\n            .catch(error => console.error(error));\r\n    }, 500);\r\n\r\n    /**\r\n     * Check and filter the results returned from the server\r\n     * @param results\r\n     */\r\n    const handleResults = (results) => {\r\n        if (!results.hits) return;\r\n        // Render the UI by clearing the results\r\n        setResults([]);\r\n        const data = [];\r\n        //Make sure the results matches the search query\r\n        results.hits.forEach(function (hit) {\r\n            hit.locale_names[0].toLowerCase().includes(results.query.toLowerCase()) && data.push({\r\n                name: hit.locale_names[0],\r\n                lat: hit._geoloc.lat,\r\n                lon: hit._geoloc.lng\r\n            });\r\n        });\r\n        // Render the UI by setting the results\r\n        setResults(data);\r\n    };\r\n\r\n    /**\r\n     * Handle the item clicked by getting the selected object from the results by his name,\r\n     * creating new WeatherObject from it and send it to the parent onLocationFound function to handle it\r\n     * @param e\r\n     */\r\n    const resultsItemClicked = (e) => {\r\n        //Get the selected Object from the results\r\n        const selectedObjects = getResultItemByName(e.target.textContent);\r\n        if (isEmpty(selectedObjects)) return;\r\n        // Create new WeatherObject from the selected object\r\n        const weatherObject = new WeatherObject(selectedObjects[0].lat, selectedObjects[0].lon, selectedObjects[0].name);\r\n        // Send the WeatherObject to the parent function\r\n        props.onLocationFound(weatherObject);\r\n        // Render the UI by clearing the results\r\n        setResults([]);\r\n    }\r\n\r\n    /**\r\n     * Get array of objects which matched the name provided\r\n     * @param name\r\n     * @return {*[]}\r\n     */\r\n    const getResultItemByName = (name) => results.filter((item) => isEqual(item.name, name));\r\n\r\n    return <div>\r\n        <Autocomplete\r\n            freeSolo\r\n            onInputChange={handleKeyUp}\r\n            onChange={resultsItemClicked}\r\n            options={results.map((item) => item.name)}\r\n            renderInput={(params) => (\r\n                <TextField {...params} label=\"Search location\" margin=\"normal\"\r\n                           variant=\"outlined\"/>\r\n            )}\r\n        />\r\n    </div>;\r\n}","import React, {forwardRef, useImperativeHandle, useRef, useState} from \"react\";\r\nimport LocationItem from \"./LocationItem\";\r\nimport {Dialog} from \"@material-ui/core\";\r\n\r\nexport default forwardRef((props, ref) => {\r\n\r\n    const locationFoundElement = useRef();\r\n\r\n    const [state, setState] = useState({weatherObj: null, showModal: false});\r\n\r\n    /**\r\n     * Hide the modal by changing the state\r\n     */\r\n    const hideModal = () => setState({weatherObj: null, showModal: false});\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        /**\r\n         * Set the weather object to show it at the modal\r\n         * @param weatherObj\r\n         */\r\n        setWeatherObj(weatherObj) {\r\n            setState({weatherObj: weatherObj, showModal: true})\r\n            locationFoundElement && locationFoundElement.current && locationFoundElement.current.setWeatherObj(weatherObj)\r\n        }\r\n    }));\r\n\r\n    return <div>{state.weatherObj &&\r\n    <Dialog\r\n        open={state.showModal}\r\n        onClose={hideModal}>\r\n        <LocationItem key=\"resultsFound\"\r\n                      ref={locationFoundElement}\r\n                      favoriteClicked={props.favoriteClicked}\r\n                      weatherObject={state.weatherObj}\r\n                      canBeRemoved={false}\r\n                      showToast={props.showToast}>\r\n        </LocationItem>\r\n    </Dialog>}</div>;\r\n})\r\n","import React, {forwardRef, useImperativeHandle, useState} from \"react\";\r\n\r\nimport {Snackbar, Fade} from \"@material-ui/core\";\r\n\r\nexport default forwardRef((props, ref) => {\r\n\r\n    const [state, setState] = useState({showToast: false, toastMessage: ''});\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        /**\r\n         * Show a toast message\r\n         * @param show boolean\r\n         * @param message string\r\n         */\r\n        forceShowToast(show, message) {\r\n            showToast(show, message);\r\n        }\r\n    }));\r\n\r\n    /**\r\n     * Show a toast message\r\n     * @param show boolean\r\n     * @param message string - optional (default val is empty string)\r\n     */\r\n    const showToast = (show, message: '') => setState({showToast: show, toastMessage: message});\r\n\r\n    return <Snackbar\r\n        anchorOrigin={{vertical: 'top', horizontal: 'center'}}\r\n        TransitionComponent={Fade}\r\n        open={state.showToast}\r\n        onClose={() => showToast(false)}\r\n        autoHideDuration={1000}\r\n        message={state.toastMessage}>\r\n    </Snackbar>;\r\n})","import React, {useRef} from 'react';\r\nimport CurrentLocation from '../elements/CurrentLocation.js';\r\nimport {Container} from '@material-ui/core/';\r\nimport FavoriteLocations from \"../elements/FavoriteLocations\";\r\nimport SearchBar from \"../items/SearchBar\";\r\nimport LocationFound from '../items/LocationFound.js';\r\nimport ToastElement from \"../items/ToastElement\";\r\n\r\nexport default () => {\r\n\r\n    //creating ref elements to pass functions between them from this element\r\n    const favoriteLocationsElementRef = useRef();\r\n    const locationFoundElementRef = useRef();\r\n    const toastElementRef = useRef();\r\n\r\n    /**\r\n     * Show a toast message - forward the action to the ref of the toast element\r\n     * @param show boolean\r\n     * @param message string - optional (default val is empty string\r\n     */\r\n    const showToast = (show, message: '') => toastElementRef && toastElementRef.current.forceShowToast(show, message);\r\n\r\n    /**\r\n     * Pass the favorite click action to the relevant ref element\r\n     */\r\n    const favoriteClicked = () => favoriteLocationsElementRef && favoriteLocationsElementRef.current.favoriteClicked();\r\n\r\n    /**\r\n     * Pass weather object to the relevant ref element\r\n     * @param weatherObj\r\n     */\r\n    const onLocationFound = (weatherObj) => locationFoundElementRef && locationFoundElementRef.current && locationFoundElementRef.current.setWeatherObj(weatherObj);\r\n\r\n\r\n    return <Container>\r\n        <SearchBar onLocationFound={onLocationFound}/>\r\n        <ToastElement ref={toastElementRef}/>\r\n        <LocationFound\r\n            ref={locationFoundElementRef}\r\n            favoriteClicked={favoriteClicked}\r\n            showToast={showToast}/>\r\n        <CurrentLocation\r\n            favoriteClicked={favoriteClicked}\r\n            showToast={showToast}\r\n            canBeRemoved={false}/>\r\n        <FavoriteLocations ref={favoriteLocationsElementRef}\r\n                           showToast={showToast}/>\r\n    </Container>;\r\n}","import React from 'react';\r\nimport './style.css';\r\nimport Header from './items/Header.js';\r\nimport About from './pages/About.js';\r\nimport Home from './pages/Home.js';\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\r\n\r\nexport default () =>\r\n    <BrowserRouter>\r\n        <Header/>\r\n        <Home/>\r\n        {/*<Switch>*/}\r\n        {/*    <Route exact path='/' component={Home}/>*/}\r\n        {/*    <Route path='/about'><About/></Route>*/}\r\n        {/*</Switch>*/}\r\n    </BrowserRouter>;\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a pages, after all the\r\n// existing tabs open on the pages have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our pages is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this pages are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the pages.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the pages.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}